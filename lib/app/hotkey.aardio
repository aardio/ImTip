import config;

namespace app.hotkey;

var hotkeyThreadHandle;
var hotkeyThreadId;
update = function(enabled){
	if(hotkeyThreadId){ 
		::User32.PostThreadMessage(hotkeyThreadId,0x12/*_WM_QUIT*/,0,0);
		if( !..thread.waitOne(hotkeyThreadHandle,1000) ){
			..thread.terminate(hotkeyThreadHandle,0); 
		}
	
		..raw.closehandle(hotkeyThreadHandle)
		
		hotkeyThreadHandle = null;
		hotkeyThreadId = null;
	}
	
	if(!enabled) return; 	
	
	if(!mainPath) mainPath = ..config.setting.getHotkeyCodePath();	 
	hotkeyThreadHandle = ..thread.create( 
		function(form,codePath){
			..mainForm = form;
			
			import process.aardio;
			process.aardio.run(
				function(){ 
					
					import win;
					import win.ui;
					
					//禁止在关闭最后一个独立窗口时自动退出消息循环。
					win.autoQuitMessage = false; 
					
					loadcodex(codePath,"ImTip"); 
				}
			)
		},..mainForm,mainPath
	)
	
	if(hotkeyThreadHandle){
		hotkeyThreadId = ::Kernel32.GetThreadId(hotkeyThreadHandle); 	
	}
	
}

var thrdWatcher;
edit = function(){
	if(!mainPath) mainPath = ..config.setting.getHotkeyCodePath();	 
	
	import process.aardio;
	var path = process.aardio.getPath();
	if(!path){
		if(!process.aardio.download()) return;
	}
	
	if(!thrdWatcher){
		import fsys.dirWatcher;
		import win.debounce;
		
		var updateOnCodeChange = win.debounce(update,500);
		
		thrdWatcher = ..fsys.dirWatcher.thread(
			function(filename,action,actionText){ 
				updateOnCodeChange(..config.hotkey.chkEnableHotkey);
			}, ..io.splitpath(mainPath).dir ); 	
	}

	process.aardio(mainPath);
}

..subscribe("beforeUnload",function(){
	if(hotkeyThreadId){ 
		::User32.PostThreadMessage(hotkeyThreadId,0x12/*_WM_QUIT*/,0,0); 
		..raw.closehandle(hotkeyThreadHandle);
		
		hotkeyThreadHandle = null;
		hotkeyThreadId = null; 
	}
	
	if(thrdWatcher){
		thrdWatcher.close(); //停止监视文件
	}	
} );
